project:
    name: WhiskSystem
    namespace: whisk.system
    packages:
        combinators:
            annotations:
                description: "Actions combinators for richer composition"
            actions:
                eca:
                    function: eca.js
                    annotations:
                        description: 'Event-Condition-Action: run condition action and if the result is successful run next action.'
                        parameters: |
                                      '[
                                       { "name": "$conditionName", "required": true, "type": "string", "description": "Name of action to run to compute condition. Must return error to indicate false predicate." },
                                       { "name": "$actionName",    "required": true, "type": "string", "description": "Name of action to run if result of condition action is not error." } ]'
                        sampleInput: '{ "$conditionName": "utils/echo", "$actionName": "utils/echo", "error": true }'
                        sampleOutput: '{ "$eca": "Condition was false" }'
                forwarder:
                    function: forwarder.js
                    annotations:
                        description: 'Forward parameters around another action.'
                        parameters: |
                                      '[
                                      { "name": "$actionName", "required": true, "type": "string", "description": "Name of action to run to compute condition. Must return error to indicate false predicate." },
                                      { "name": "$actionArgs", "required": true, "type": "array",  "description": "Array of parameters names from input arguments to pass to action." },
                                      { "name": "$forward",    "required": true, "type": "array",  "description": "Array of parameters names from input arguments to merge with result of action." } ]'
                        sampleInput: '{ "$actionName": "utils/echo", "$actionArgs": [ "x" ], "$forward": [ "y" ], "x": true, "y": true }'
                        sampleOutput: '{ "x": true, "y": true }'
                retry:
                    function: retry.js
                    annotations:
                        description: 'Retry invoking an action until success or attempt count is exhausted, which ever comes first.'
                        parameters: |
                                      '[
                                       { "name": "$actionName", "required": true, "type": "string", "description": "Name of action to run." },
                                       { "name": "$attempts", "required": true, "type": "integer", "description": "Name of attempts, must be >= 1." } ]'
                        sampleInput: '{ "$actionName": "utils/echo", "error": true }'
                        sampleOutput: '{ "error": "Invocation failed. No retries left." }'
                trycatch:
                    function: trycatch.js
                    annotations:
                        description: 'Wraps an action with a try-catch. If the action fails, invokes a second action to handle the error.'
                        parameters: |
                                      '[
                                       { "name": "$tryName",   "required": true, "type": "string", "description": "Name of action to wrap with a try." },
                                       { "name": "$catchName", "required": true, "type": "string", "description": "Name of action to run if there is a try error." } ]'
                        sampleInput: '{ "$tryName": "utils/echo", "$catchName": "utils/echo", "error": true }'
                        sampleOutput: '{ "error": true }'
