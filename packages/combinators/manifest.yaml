#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
project:
    name: WhiskSystem
    packages:
        combinators:
            license: Apache-2.0
            version: 0.0.1
            public: true
            annotations:
                description: Actions combinators for richer composition
            actions:
                eca:
                    version: 0.0.1
                    function: eca.js
                    annotations:
                        provide-api-key: true,
                        description: "Event-Condition-Action: run condition action and if the result is successful run next action."
                        parameters: [
                            {
                                "name": "$conditionName",
                                "required": true,
                                "type": "string",
                                "description": "Name of action to run to compute condition. Must return error to indicate false predicate."
                            },
                            {
                                "name": "$actionName",
                                "required": true,
                                "type": "string",
                                "description": "Name of action to run if result of condition action is not error."
                            }
                        ]
                        sampleInput: {
                            "$conditionName": "utils/echo",
                            "$actionName": "utils/echo",
                            "error": true
                        }
                        sampleOutput: { "$eca": "Condition was false" }
                forwarder:
                    version: 0.0.1
                    function: forwarder.js
                    annotations:
                        provide-api-key: true,
                        description: "Forward parameters around another action."
                        parameters: [
                            {
                                "name": "$actionName",
                                "required": true,
                                "type": "string",
                                "description": "Name of action to run to compute condition. Must return error to indicate false predicate."
                            },
                            {
                                "name": "$actionArgs",
                                "required": true,
                                "type": "array",
                                "description": "Array of parameters names from input arguments to pass to action."
                            },
                            {
                                "name": "$forward",
                                "required": true,
                                "type": "array",
                                "description": "Array of parameters names from input arguments to merge with result of action."
                            }
                        ]
                        sampleInput: {
                            "$actionName": "utils/echo",
                            "$actionArgs": [ "x" ],
                            "$forward": [ "y" ],
                            "x": true,
                            "y": true
                        }
                        sampleOutput: {
                            "x": true,
                            "y": true
                        }
                retry:
                    version: 0.0.1
                    function: retry.js
                    annotations:
                        provide-api-key: true,
                        description: "Retry invoking an action until success or attempt count is exhausted, which ever comes first."
                        parameters: [
                            {
                                "name": "$actionName",
                                "required": true,
                                "type": "string",
                                "description": "Name of action to run."
                            },
                            {
                                "name": "$attempts",
                                "required": true,
                                "type": "integer",
                                "description": "Number of attempts, must be >= 1."
                            }
                        ]
                        sampleInput: {
                            "$actionName": "utils/echo",
                            "error": true
                        }
                        sampleOutput: { "error": "Invocation failed. No retries left." }
                trycatch:
                    version: 0.0.1
                    function: trycatch.js
                    annotations:
                        provide-api-key: true,
                        description: "Wraps an action with a try-catch. If the action fails, invokes a second action to handle the error."
                        parameters: [
                            {
                                "name": "$tryName",
                                "required": true,
                                "type": "string",
                                "description": "Name of action to wrap with a try."
                            },
                            {
                                "name": "$catchName",
                                "required": true,
                                "type": "string",
                                "description": "Name of action to run if there is a try error."
                            }
                        ]
                        sampleInput: {
                            "$tryName": "utils/echo",
                            "$catchName": "utils/echo",
                            "error": true
                        }
                        sampleOutput: { "error": true }
